<?php

namespace Tests\Unit\Domain\Sections;

use App\CssModule;
use App\Domain\Sections\Models\Section;
use App\Fragment;
use App\JavaScriptEvent;
use App\JavaScriptModule;
use App\LibraryDependency;
use App\SectionFragment;
use Tests\DbTestCase;

class SectionJavascriptTest extends DbTestCase
{
    protected function setUp(): void
    {
    	$this->markTestSkipped();
        parent::setUp(); // TODO: Change the autogenerated stub

        JavaScriptModule::initializeSingleton();
        SectionFragment::initializeSingleton();
        CssModule::initializeSingleton();
    }

    /** @test */
    public function it_can_have_a_javascript_string()
    {
        $section = Factory(Section::class)->create([
            'javascript' => 'this is javascript',
        ]);

        $this->assertEquals('this is javascript', $section->javascript);
    }

    /** @test */
    public function it_can_have_a_javascript_module()
    {
        $section = Factory(Section::class)->create([
            'javascript' => 'initializing code',
        ]);

        $module = JavaScriptModule::create([
            'name' => 'js_module',
            'code' => 'const swiper = new Swiper(\'.swiper-container\', {!! $config !!});

@if(isset($slideChange))
swiper.on(\'slideChange\', function (el) {
	{{$slideChange}}
});
@endif',
            'parameters' => '    {
	"config":  {
            "autoplay": {
                "delay": 5000
            },
            "speed": 500,
            "autoplayDisableOnInteraction": false,
            "autoHeight": true
        }
    }
',
        ]);

        $section->javaScriptModules()->attach($module, [
            'arguments' => json_encode([
                'javascript' => [
                    [
                        'java_script_module_id' => $module->id,
                        'arguments' => [],
                    ],
                ],
            ]),
        ]);

        //		$this->assertEquals('this is a code snippet', $section->javaScriptModules->first()->code);
        $this->assertEquals('initializing code', $section->js->getJavaScriptCode());

        $this->assertEquals(json_encode([
            'javascript' => [
                'id' => $module->id,
            ],
        ]), $section->javaScriptModules->first()->pivot->arguments);
    }

    /** @test */
    public function a_java_script_module_can_have_dependencies()
    {
        $module = JavaScriptModule::create([
            'name' => 'js_module',
            'code' => 'this is a code snippet',
            'parameters' => json_encode([]),
        ]);

        $dependency = LibraryDependency::create([
            'name' => 'foo',
            'url' => 'bar',
            'type' => 0,
        ]);

        $module->library_dependencies()->attach($dependency);

        $this->assertCount(1, $module->library_dependencies);
    }

    /** @test */
    public function a_sectiopn_can_have_library_dependencies()
    {
        $section = Factory(Section::class)->create([
            'javascript' => 'initializing code',
        ]);

        $module = JavaScriptModule::create([
            'name' => 'js_module',
            'code' => 'this is a code snippet',
            'parameters' => json_encode([]),
        ]);

        $dependency = LibraryDependency::create([
            'name' => 'foo',
            'url' => 'bar',
            'type' => 0,
        ]);

        $module->library_dependencies()->attach($dependency);

        $section->javaScriptModules()->attach($module, [
            'arguments' => json_encode([
                'javascript' => [
                    [
                        'java_script_module_id' => $module->id,
                        'arguments' => [],
                    ],
                ],
            ]),
        ]);

        $this->assertCount(1, $module->library_dependencies);
        $this->assertCount(1, $section->js->dependencies());
        $this->assertEquals($module->library_dependencies->first()->toArray(), $section->js->dependencies()->first()->toArray());
    }

    /** @test */
    public function it_can_have_different_types_of_events()
    {
        $section = Factory(Section::class)->create();

        $fragment = Fragment::create([
            'name' => 'foo',
            'html' => 'bar',
        ]);

        $section->fragments()->attach($fragment, [
            'trigger' => 1,
        ]);

        $this->assertEquals(JavaScriptEvent::CLICK, $section->fragments->first()->pivot->trigger);

        $section = Factory(Section::class)->create();

        $fragment = Fragment::create([
            'name' => 'foo',
            'html' => 'bar',
        ]);

        $section->fragments()->attach($fragment, [
            'trigger' => 2,
        ]);

        $this->assertEquals(JavaScriptEvent::HOVER, $section->fragments->first()->pivot->trigger);
    }

    /** @test */
    public function it_can_render_a_click_event()
    {
        $jsEvent = new JavaScriptEvent('my-identifier');

        $this->assertStringContainsString('document.getElementById("' . 'my-identifier' . '").addEventListener("' . 'click' . '", function(){' . PHP_EOL, $jsEvent->getCode());
    }
}
